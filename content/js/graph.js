/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 724.0, "minX": 0.0, "maxY": 21258.0, "series": [{"data": [[0.0, 724.0], [0.1, 757.0], [0.2, 760.0], [0.3, 760.0], [0.4, 770.0], [0.5, 776.0], [0.6, 789.0], [0.7, 793.0], [0.8, 796.0], [0.9, 897.0], [1.0, 905.0], [1.1, 914.0], [1.2, 932.0], [1.3, 961.0], [1.4, 961.0], [1.5, 989.0], [1.6, 990.0], [1.7, 991.0], [1.8, 993.0], [1.9, 999.0], [2.0, 1000.0], [2.1, 1001.0], [2.2, 1004.0], [2.3, 1006.0], [2.4, 1007.0], [2.5, 1008.0], [2.6, 1116.0], [2.7, 1134.0], [2.8, 1136.0], [2.9, 1138.0], [3.0, 1139.0], [3.1, 1140.0], [3.2, 1143.0], [3.3, 1147.0], [3.4, 1149.0], [3.5, 1149.0], [3.6, 1149.0], [3.7, 1152.0], [3.8, 1152.0], [3.9, 1153.0], [4.0, 1154.0], [4.1, 1156.0], [4.2, 1156.0], [4.3, 1157.0], [4.4, 1158.0], [4.5, 1158.0], [4.6, 1159.0], [4.7, 1160.0], [4.8, 1163.0], [4.9, 1164.0], [5.0, 1164.0], [5.1, 1167.0], [5.2, 1168.0], [5.3, 1168.0], [5.4, 1174.0], [5.5, 1177.0], [5.6, 1178.0], [5.7, 1179.0], [5.8, 1184.0], [5.9, 1184.0], [6.0, 1189.0], [6.1, 1191.0], [6.2, 1197.0], [6.3, 1199.0], [6.4, 1200.0], [6.5, 1204.0], [6.6, 1207.0], [6.7, 1207.0], [6.8, 1215.0], [6.9, 1222.0], [7.0, 1227.0], [7.1, 1228.0], [7.2, 1235.0], [7.3, 1250.0], [7.4, 1253.0], [7.5, 1255.0], [7.6, 1257.0], [7.7, 1261.0], [7.8, 1262.0], [7.9, 1267.0], [8.0, 1270.0], [8.1, 1280.0], [8.2, 1281.0], [8.3, 1307.0], [8.4, 1308.0], [8.5, 1308.0], [8.6, 1313.0], [8.7, 1315.0], [8.8, 1315.0], [8.9, 1315.0], [9.0, 1315.0], [9.1, 1316.0], [9.2, 1317.0], [9.3, 1317.0], [9.4, 1317.0], [9.5, 1320.0], [9.6, 1322.0], [9.7, 1326.0], [9.8, 1327.0], [9.9, 1327.0], [10.0, 1328.0], [10.1, 1328.0], [10.2, 1332.0], [10.3, 1332.0], [10.4, 1333.0], [10.5, 1335.0], [10.6, 1336.0], [10.7, 1339.0], [10.8, 1339.0], [10.9, 1343.0], [11.0, 1346.0], [11.1, 1351.0], [11.2, 1355.0], [11.3, 1358.0], [11.4, 1359.0], [11.5, 1360.0], [11.6, 1361.0], [11.7, 1363.0], [11.8, 1368.0], [11.9, 1372.0], [12.0, 1373.0], [12.1, 1373.0], [12.2, 1373.0], [12.3, 1380.0], [12.4, 1391.0], [12.5, 1392.0], [12.6, 1392.0], [12.7, 1392.0], [12.8, 1395.0], [12.9, 1397.0], [13.0, 1400.0], [13.1, 1404.0], [13.2, 1404.0], [13.3, 1406.0], [13.4, 1409.0], [13.5, 1409.0], [13.6, 1410.0], [13.7, 1412.0], [13.8, 1417.0], [13.9, 1419.0], [14.0, 1421.0], [14.1, 1428.0], [14.2, 1429.0], [14.3, 1430.0], [14.4, 1434.0], [14.5, 1436.0], [14.6, 1452.0], [14.7, 1454.0], [14.8, 1459.0], [14.9, 1463.0], [15.0, 1464.0], [15.1, 1468.0], [15.2, 1469.0], [15.3, 1477.0], [15.4, 1487.0], [15.5, 1487.0], [15.6, 1489.0], [15.7, 1490.0], [15.8, 1490.0], [15.9, 1493.0], [16.0, 1498.0], [16.1, 1499.0], [16.2, 1501.0], [16.3, 1506.0], [16.4, 1508.0], [16.5, 1509.0], [16.6, 1510.0], [16.7, 1511.0], [16.8, 1514.0], [16.9, 1515.0], [17.0, 1519.0], [17.1, 1520.0], [17.2, 1524.0], [17.3, 1527.0], [17.4, 1530.0], [17.5, 1536.0], [17.6, 1538.0], [17.7, 1538.0], [17.8, 1539.0], [17.9, 1539.0], [18.0, 1545.0], [18.1, 1550.0], [18.2, 1552.0], [18.3, 1555.0], [18.4, 1555.0], [18.5, 1558.0], [18.6, 1561.0], [18.7, 1562.0], [18.8, 1563.0], [18.9, 1563.0], [19.0, 1577.0], [19.1, 1578.0], [19.2, 1581.0], [19.3, 1592.0], [19.4, 1599.0], [19.5, 1603.0], [19.6, 1608.0], [19.7, 1608.0], [19.8, 1609.0], [19.9, 1617.0], [20.0, 1620.0], [20.1, 1624.0], [20.2, 1625.0], [20.3, 1631.0], [20.4, 1633.0], [20.5, 1640.0], [20.6, 1655.0], [20.7, 1656.0], [20.8, 1661.0], [20.9, 1662.0], [21.0, 1680.0], [21.1, 1683.0], [21.2, 1683.0], [21.3, 1684.0], [21.4, 1685.0], [21.5, 1693.0], [21.6, 1696.0], [21.7, 1697.0], [21.8, 1699.0], [21.9, 1703.0], [22.0, 1705.0], [22.1, 1706.0], [22.2, 1711.0], [22.3, 1735.0], [22.4, 1738.0], [22.5, 1741.0], [22.6, 1741.0], [22.7, 1755.0], [22.8, 1765.0], [22.9, 1778.0], [23.0, 1799.0], [23.1, 1807.0], [23.2, 1824.0], [23.3, 1846.0], [23.4, 1952.0], [23.5, 1954.0], [23.6, 1960.0], [23.7, 1961.0], [23.8, 1965.0], [23.9, 1977.0], [24.0, 1977.0], [24.1, 1980.0], [24.2, 1984.0], [24.3, 1984.0], [24.4, 2013.0], [24.5, 2021.0], [24.6, 2023.0], [24.7, 2032.0], [24.8, 2035.0], [24.9, 2047.0], [25.0, 2049.0], [25.1, 2064.0], [25.2, 2080.0], [25.3, 2094.0], [25.4, 2122.0], [25.5, 2123.0], [25.6, 2138.0], [25.7, 2139.0], [25.8, 2142.0], [25.9, 2160.0], [26.0, 2166.0], [26.1, 2166.0], [26.2, 2175.0], [26.3, 2190.0], [26.4, 2190.0], [26.5, 2200.0], [26.6, 2210.0], [26.7, 2215.0], [26.8, 2219.0], [26.9, 2225.0], [27.0, 2233.0], [27.1, 2234.0], [27.2, 2249.0], [27.3, 2254.0], [27.4, 2266.0], [27.5, 2271.0], [27.6, 2288.0], [27.7, 2289.0], [27.8, 2290.0], [27.9, 2291.0], [28.0, 2293.0], [28.1, 2302.0], [28.2, 2310.0], [28.3, 2312.0], [28.4, 2312.0], [28.5, 2325.0], [28.6, 2339.0], [28.7, 2346.0], [28.8, 2349.0], [28.9, 2355.0], [29.0, 2356.0], [29.1, 2363.0], [29.2, 2365.0], [29.3, 2365.0], [29.4, 2366.0], [29.5, 2368.0], [29.6, 2368.0], [29.7, 2384.0], [29.8, 2400.0], [29.9, 2401.0], [30.0, 2402.0], [30.1, 2402.0], [30.2, 2402.0], [30.3, 2403.0], [30.4, 2405.0], [30.5, 2408.0], [30.6, 2411.0], [30.7, 2421.0], [30.8, 2422.0], [30.9, 2422.0], [31.0, 2423.0], [31.1, 2423.0], [31.2, 2423.0], [31.3, 2428.0], [31.4, 2431.0], [31.5, 2435.0], [31.6, 2438.0], [31.7, 2442.0], [31.8, 2450.0], [31.9, 2452.0], [32.0, 2458.0], [32.1, 2470.0], [32.2, 2473.0], [32.3, 2487.0], [32.4, 2490.0], [32.5, 2497.0], [32.6, 2500.0], [32.7, 2503.0], [32.8, 2508.0], [32.9, 2525.0], [33.0, 2528.0], [33.1, 2528.0], [33.2, 2529.0], [33.3, 2533.0], [33.4, 2534.0], [33.5, 2537.0], [33.6, 2540.0], [33.7, 2543.0], [33.8, 2544.0], [33.9, 2556.0], [34.0, 2557.0], [34.1, 2558.0], [34.2, 2563.0], [34.3, 2576.0], [34.4, 2576.0], [34.5, 2586.0], [34.6, 2600.0], [34.7, 2602.0], [34.8, 2603.0], [34.9, 2606.0], [35.0, 2607.0], [35.1, 2611.0], [35.2, 2611.0], [35.3, 2614.0], [35.4, 2614.0], [35.5, 2617.0], [35.6, 2620.0], [35.7, 2620.0], [35.8, 2621.0], [35.9, 2622.0], [36.0, 2623.0], [36.1, 2627.0], [36.2, 2628.0], [36.3, 2629.0], [36.4, 2629.0], [36.5, 2635.0], [36.6, 2645.0], [36.7, 2655.0], [36.8, 2659.0], [36.9, 2664.0], [37.0, 2669.0], [37.1, 2694.0], [37.2, 2695.0], [37.3, 2700.0], [37.4, 2702.0], [37.5, 2706.0], [37.6, 2725.0], [37.7, 2725.0], [37.8, 2727.0], [37.9, 2730.0], [38.0, 2741.0], [38.1, 2761.0], [38.2, 2762.0], [38.3, 2765.0], [38.4, 2772.0], [38.5, 2773.0], [38.6, 2795.0], [38.7, 2804.0], [38.8, 2808.0], [38.9, 2813.0], [39.0, 2815.0], [39.1, 2826.0], [39.2, 2827.0], [39.3, 2832.0], [39.4, 2846.0], [39.5, 2847.0], [39.6, 2848.0], [39.7, 2856.0], [39.8, 2858.0], [39.9, 2869.0], [40.0, 2869.0], [40.1, 2876.0], [40.2, 2878.0], [40.3, 2884.0], [40.4, 2889.0], [40.5, 2889.0], [40.6, 2892.0], [40.7, 2900.0], [40.8, 2901.0], [40.9, 2901.0], [41.0, 2913.0], [41.1, 2921.0], [41.2, 2925.0], [41.3, 2934.0], [41.4, 2934.0], [41.5, 2947.0], [41.6, 2949.0], [41.7, 2951.0], [41.8, 2976.0], [41.9, 2982.0], [42.0, 3001.0], [42.1, 3007.0], [42.2, 3012.0], [42.3, 3014.0], [42.4, 3026.0], [42.5, 3027.0], [42.6, 3032.0], [42.7, 3037.0], [42.8, 3053.0], [42.9, 3060.0], [43.0, 3067.0], [43.1, 3072.0], [43.2, 3080.0], [43.3, 3102.0], [43.4, 3159.0], [43.5, 3166.0], [43.6, 3171.0], [43.7, 3181.0], [43.8, 3182.0], [43.9, 3191.0], [44.0, 3197.0], [44.1, 3200.0], [44.2, 3203.0], [44.3, 3209.0], [44.4, 3212.0], [44.5, 3212.0], [44.6, 3222.0], [44.7, 3225.0], [44.8, 3226.0], [44.9, 3243.0], [45.0, 3249.0], [45.1, 3250.0], [45.2, 3253.0], [45.3, 3254.0], [45.4, 3276.0], [45.5, 3278.0], [45.6, 3283.0], [45.7, 3284.0], [45.8, 3298.0], [45.9, 3300.0], [46.0, 3302.0], [46.1, 3306.0], [46.2, 3310.0], [46.3, 3327.0], [46.4, 3344.0], [46.5, 3350.0], [46.6, 3377.0], [46.7, 3415.0], [46.8, 3426.0], [46.9, 3493.0], [47.0, 3498.0], [47.1, 3501.0], [47.2, 3502.0], [47.3, 3537.0], [47.4, 3557.0], [47.5, 3599.0], [47.6, 3615.0], [47.7, 3622.0], [47.8, 3645.0], [47.9, 3647.0], [48.0, 3689.0], [48.1, 3695.0], [48.2, 3708.0], [48.3, 3713.0], [48.4, 3716.0], [48.5, 3725.0], [48.6, 3729.0], [48.7, 3753.0], [48.8, 3759.0], [48.9, 3766.0], [49.0, 3770.0], [49.1, 3772.0], [49.2, 3772.0], [49.3, 3772.0], [49.4, 3778.0], [49.5, 3788.0], [49.6, 3789.0], [49.7, 3790.0], [49.8, 3793.0], [49.9, 3799.0], [50.0, 3799.0], [50.1, 3799.0], [50.2, 3799.0], [50.3, 3800.0], [50.4, 3808.0], [50.5, 3812.0], [50.6, 3812.0], [50.7, 3816.0], [50.8, 3816.0], [50.9, 3817.0], [51.0, 3820.0], [51.1, 3821.0], [51.2, 3825.0], [51.3, 3826.0], [51.4, 3829.0], [51.5, 3834.0], [51.6, 3834.0], [51.7, 3841.0], [51.8, 3842.0], [51.9, 3845.0], [52.0, 3847.0], [52.1, 3848.0], [52.2, 3848.0], [52.3, 3849.0], [52.4, 3851.0], [52.5, 3851.0], [52.6, 3851.0], [52.7, 3851.0], [52.8, 3852.0], [52.9, 3853.0], [53.0, 3856.0], [53.1, 3859.0], [53.2, 3863.0], [53.3, 3869.0], [53.4, 3870.0], [53.5, 3872.0], [53.6, 3872.0], [53.7, 3875.0], [53.8, 3875.0], [53.9, 3881.0], [54.0, 3881.0], [54.1, 3892.0], [54.2, 3892.0], [54.3, 3894.0], [54.4, 3898.0], [54.5, 3899.0], [54.6, 3902.0], [54.7, 3908.0], [54.8, 3918.0], [54.9, 3920.0], [55.0, 3921.0], [55.1, 3922.0], [55.2, 3922.0], [55.3, 3926.0], [55.4, 3926.0], [55.5, 3927.0], [55.6, 3932.0], [55.7, 3942.0], [55.8, 3944.0], [55.9, 3945.0], [56.0, 3949.0], [56.1, 3956.0], [56.2, 3959.0], [56.3, 3962.0], [56.4, 3964.0], [56.5, 3965.0], [56.6, 3965.0], [56.7, 3965.0], [56.8, 3969.0], [56.9, 3972.0], [57.0, 3975.0], [57.1, 3976.0], [57.2, 3982.0], [57.3, 3982.0], [57.4, 3983.0], [57.5, 3998.0], [57.6, 3998.0], [57.7, 4001.0], [57.8, 4024.0], [57.9, 4027.0], [58.0, 4047.0], [58.1, 4053.0], [58.2, 4061.0], [58.3, 4091.0], [58.4, 4092.0], [58.5, 4095.0], [58.6, 4103.0], [58.7, 4111.0], [58.8, 4126.0], [58.9, 4135.0], [59.0, 4151.0], [59.1, 4151.0], [59.2, 4151.0], [59.3, 4153.0], [59.4, 4155.0], [59.5, 4159.0], [59.6, 4159.0], [59.7, 4160.0], [59.8, 4165.0], [59.9, 4168.0], [60.0, 4170.0], [60.1, 4172.0], [60.2, 4193.0], [60.3, 4198.0], [60.4, 4201.0], [60.5, 4213.0], [60.6, 4225.0], [60.7, 4232.0], [60.8, 4237.0], [60.9, 4244.0], [61.0, 4244.0], [61.1, 4246.0], [61.2, 4272.0], [61.3, 4277.0], [61.4, 4284.0], [61.5, 4286.0], [61.6, 4288.0], [61.7, 4294.0], [61.8, 4299.0], [61.9, 4309.0], [62.0, 4311.0], [62.1, 4327.0], [62.2, 4327.0], [62.3, 4335.0], [62.4, 4336.0], [62.5, 4336.0], [62.6, 4341.0], [62.7, 4342.0], [62.8, 4342.0], [62.9, 4343.0], [63.0, 4348.0], [63.1, 4354.0], [63.2, 4355.0], [63.3, 4356.0], [63.4, 4360.0], [63.5, 4371.0], [63.6, 4372.0], [63.7, 4392.0], [63.8, 4397.0], [63.9, 4398.0], [64.0, 4422.0], [64.1, 4431.0], [64.2, 4458.0], [64.3, 4469.0], [64.4, 4472.0], [64.5, 4473.0], [64.6, 4474.0], [64.7, 4480.0], [64.8, 4486.0], [64.9, 4497.0], [65.0, 4497.0], [65.1, 4509.0], [65.2, 4523.0], [65.3, 4532.0], [65.4, 4562.0], [65.5, 4569.0], [65.6, 4586.0], [65.7, 4587.0], [65.8, 4588.0], [65.9, 4590.0], [66.0, 4593.0], [66.1, 4603.0], [66.2, 4608.0], [66.3, 4609.0], [66.4, 4614.0], [66.5, 4617.0], [66.6, 4624.0], [66.7, 4626.0], [66.8, 4627.0], [66.9, 4630.0], [67.0, 4637.0], [67.1, 4639.0], [67.2, 4642.0], [67.3, 4643.0], [67.4, 4649.0], [67.5, 4665.0], [67.6, 4686.0], [67.7, 4687.0], [67.8, 4703.0], [67.9, 4713.0], [68.0, 4723.0], [68.1, 4724.0], [68.2, 4733.0], [68.3, 4751.0], [68.4, 4759.0], [68.5, 4766.0], [68.6, 4819.0], [68.7, 4861.0], [68.8, 4864.0], [68.9, 4865.0], [69.0, 4880.0], [69.1, 4882.0], [69.2, 4883.0], [69.3, 4883.0], [69.4, 4891.0], [69.5, 4891.0], [69.6, 4904.0], [69.7, 4904.0], [69.8, 4910.0], [69.9, 4911.0], [70.0, 4916.0], [70.1, 4918.0], [70.2, 4919.0], [70.3, 4940.0], [70.4, 4948.0], [70.5, 4948.0], [70.6, 4955.0], [70.7, 4960.0], [70.8, 4975.0], [70.9, 4984.0], [71.0, 4988.0], [71.1, 4989.0], [71.2, 5020.0], [71.3, 5021.0], [71.4, 5029.0], [71.5, 5038.0], [71.6, 5039.0], [71.7, 5041.0], [71.8, 5056.0], [71.9, 5079.0], [72.0, 5083.0], [72.1, 5092.0], [72.2, 5133.0], [72.3, 5133.0], [72.4, 5134.0], [72.5, 5134.0], [72.6, 5146.0], [72.7, 5147.0], [72.8, 5165.0], [72.9, 5172.0], [73.0, 5211.0], [73.1, 5222.0], [73.2, 5228.0], [73.3, 5229.0], [73.4, 5246.0], [73.5, 5268.0], [73.6, 5268.0], [73.7, 5271.0], [73.8, 5285.0], [73.9, 5286.0], [74.0, 5288.0], [74.1, 5294.0], [74.2, 5299.0], [74.3, 5311.0], [74.4, 5311.0], [74.5, 5315.0], [74.6, 5327.0], [74.7, 5332.0], [74.8, 5335.0], [74.9, 5341.0], [75.0, 5343.0], [75.1, 5344.0], [75.2, 5347.0], [75.3, 5348.0], [75.4, 5349.0], [75.5, 5349.0], [75.6, 5358.0], [75.7, 5361.0], [75.8, 5365.0], [75.9, 5366.0], [76.0, 5375.0], [76.1, 5389.0], [76.2, 5391.0], [76.3, 5398.0], [76.4, 5402.0], [76.5, 5407.0], [76.6, 5409.0], [76.7, 5411.0], [76.8, 5420.0], [76.9, 5423.0], [77.0, 5425.0], [77.1, 5429.0], [77.2, 5430.0], [77.3, 5431.0], [77.4, 5435.0], [77.5, 5437.0], [77.6, 5443.0], [77.7, 5445.0], [77.8, 5445.0], [77.9, 5446.0], [78.0, 5447.0], [78.1, 5450.0], [78.2, 5452.0], [78.3, 5454.0], [78.4, 5455.0], [78.5, 5456.0], [78.6, 5457.0], [78.7, 5457.0], [78.8, 5457.0], [78.9, 5460.0], [79.0, 5470.0], [79.1, 5483.0], [79.2, 5490.0], [79.3, 5500.0], [79.4, 5519.0], [79.5, 5528.0], [79.6, 5546.0], [79.7, 5548.0], [79.8, 5555.0], [79.9, 5561.0], [80.0, 5574.0], [80.1, 5581.0], [80.2, 5594.0], [80.3, 5603.0], [80.4, 5603.0], [80.5, 5605.0], [80.6, 5609.0], [80.7, 5611.0], [80.8, 5612.0], [80.9, 5616.0], [81.0, 5619.0], [81.1, 5621.0], [81.2, 5624.0], [81.3, 5627.0], [81.4, 5632.0], [81.5, 5632.0], [81.6, 5637.0], [81.7, 5640.0], [81.8, 5641.0], [81.9, 5645.0], [82.0, 5650.0], [82.1, 5654.0], [82.2, 5658.0], [82.3, 5660.0], [82.4, 5666.0], [82.5, 5668.0], [82.6, 5668.0], [82.7, 5670.0], [82.8, 5678.0], [82.9, 5684.0], [83.0, 5685.0], [83.1, 5691.0], [83.2, 5692.0], [83.3, 5696.0], [83.4, 5698.0], [83.5, 5698.0], [83.6, 5698.0], [83.7, 5704.0], [83.8, 5706.0], [83.9, 5711.0], [84.0, 5713.0], [84.1, 5714.0], [84.2, 5716.0], [84.3, 5718.0], [84.4, 5720.0], [84.5, 5720.0], [84.6, 5725.0], [84.7, 5728.0], [84.8, 5729.0], [84.9, 5730.0], [85.0, 5733.0], [85.1, 5738.0], [85.2, 5752.0], [85.3, 5752.0], [85.4, 5758.0], [85.5, 5758.0], [85.6, 5763.0], [85.7, 5766.0], [85.8, 5767.0], [85.9, 5779.0], [86.0, 5794.0], [86.1, 5800.0], [86.2, 5802.0], [86.3, 5822.0], [86.4, 5823.0], [86.5, 5823.0], [86.6, 5824.0], [86.7, 5824.0], [86.8, 5827.0], [86.9, 5839.0], [87.0, 5840.0], [87.1, 5863.0], [87.2, 5871.0], [87.3, 5871.0], [87.4, 5876.0], [87.5, 5881.0], [87.6, 6084.0], [87.7, 6147.0], [87.8, 6171.0], [87.9, 6244.0], [88.0, 6244.0], [88.1, 6276.0], [88.2, 6284.0], [88.3, 6455.0], [88.4, 6989.0], [88.5, 6990.0], [88.6, 20530.0], [88.7, 20532.0], [88.8, 20556.0], [88.9, 20556.0], [89.0, 20557.0], [89.1, 20557.0], [89.2, 20559.0], [89.3, 20559.0], [89.4, 20560.0], [89.5, 20560.0], [89.6, 20561.0], [89.7, 20562.0], [89.8, 20564.0], [89.9, 20564.0], [90.0, 20565.0], [90.1, 20579.0], [90.2, 20631.0], [90.3, 20632.0], [90.4, 20632.0], [90.5, 20633.0], [90.6, 20634.0], [90.7, 20634.0], [90.8, 20636.0], [90.9, 20638.0], [91.0, 20639.0], [91.1, 20640.0], [91.2, 20641.0], [91.3, 20643.0], [91.4, 20643.0], [91.5, 20644.0], [91.6, 20646.0], [91.7, 20649.0], [91.8, 20649.0], [91.9, 20650.0], [92.0, 20651.0], [92.1, 20652.0], [92.2, 20653.0], [92.3, 20653.0], [92.4, 20653.0], [92.5, 20654.0], [92.6, 20655.0], [92.7, 20655.0], [92.8, 20655.0], [92.9, 20656.0], [93.0, 20656.0], [93.1, 20657.0], [93.2, 20657.0], [93.3, 20657.0], [93.4, 20658.0], [93.5, 20658.0], [93.6, 20658.0], [93.7, 20658.0], [93.8, 20658.0], [93.9, 20658.0], [94.0, 20659.0], [94.1, 20659.0], [94.2, 20659.0], [94.3, 20659.0], [94.4, 20659.0], [94.5, 20659.0], [94.6, 20660.0], [94.7, 20661.0], [94.8, 20662.0], [94.9, 20662.0], [95.0, 20662.0], [95.1, 20662.0], [95.2, 20662.0], [95.3, 20663.0], [95.4, 20663.0], [95.5, 20664.0], [95.6, 20664.0], [95.7, 20664.0], [95.8, 20664.0], [95.9, 20664.0], [96.0, 20665.0], [96.1, 20665.0], [96.2, 20665.0], [96.3, 20665.0], [96.4, 20665.0], [96.5, 20666.0], [96.6, 20666.0], [96.7, 20666.0], [96.8, 20666.0], [96.9, 20666.0], [97.0, 20668.0], [97.1, 21183.0], [97.2, 21189.0], [97.3, 21190.0], [97.4, 21191.0], [97.5, 21193.0], [97.6, 21194.0], [97.7, 21196.0], [97.8, 21196.0], [97.9, 21196.0], [98.0, 21197.0], [98.1, 21197.0], [98.2, 21200.0], [98.3, 21200.0], [98.4, 21201.0], [98.5, 21201.0], [98.6, 21201.0], [98.7, 21209.0], [98.8, 21213.0], [98.9, 21215.0], [99.0, 21218.0], [99.1, 21219.0], [99.2, 21221.0], [99.3, 21223.0], [99.4, 21250.0], [99.5, 21251.0], [99.6, 21251.0], [99.7, 21253.0], [99.8, 21254.0], [99.9, 21258.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 69.0, "series": [{"data": [[700.0, 9.0], [800.0, 1.0], [900.0, 9.0], [1000.0, 6.0], [1100.0, 39.0], [1200.0, 19.0], [1300.0, 47.0], [1400.0, 32.0], [1500.0, 32.0], [1600.0, 24.0], [1700.0, 12.0], [1800.0, 3.0], [1900.0, 10.0], [2000.0, 10.0], [2100.0, 11.0], [2200.0, 16.0], [2300.0, 17.0], [2400.0, 28.0], [2500.0, 20.0], [2600.0, 27.0], [2700.0, 14.0], [2800.0, 20.0], [2900.0, 13.0], [3000.0, 13.0], [3100.0, 8.0], [3200.0, 18.0], [3300.0, 8.0], [3400.0, 4.0], [3500.0, 5.0], [3600.0, 6.0], [3700.0, 21.0], [3800.0, 43.0], [3900.0, 31.0], [4000.0, 9.0], [4100.0, 18.0], [4200.0, 15.0], [4300.0, 21.0], [4400.0, 11.0], [4500.0, 10.0], [4600.0, 17.0], [4700.0, 8.0], [4800.0, 10.0], [4900.0, 16.0], [5000.0, 10.0], [5100.0, 8.0], [5200.0, 13.0], [5300.0, 22.0], [5400.0, 29.0], [5500.0, 10.0], [5600.0, 34.0], [5700.0, 24.0], [5800.0, 15.0], [6000.0, 1.0], [6100.0, 2.0], [6200.0, 4.0], [6400.0, 1.0], [6900.0, 2.0], [20500.0, 16.0], [20600.0, 69.0], [21100.0, 11.0], [21200.0, 18.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 21200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 114.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 724.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 162.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 724.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 114.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.24599999999924, "minX": 1.66506294E12, "maxY": 501.24599999999924, "series": [{"data": [[1.66506294E12, 501.24599999999924]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66506294E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 724.0, "minX": 1.0, "maxY": 21253.0, "series": [{"data": [[5.0, 21239.5], [9.0, 21197.0], [11.0, 21196.0], [12.0, 21202.666666666668], [14.0, 21200.0], [15.0, 20659.0], [16.0, 21217.0], [17.0, 21206.333333333332], [19.0, 21192.5], [21.0, 21193.0], [22.0, 21253.0], [23.0, 21201.0], [24.0, 20856.0], [27.0, 20862.333333333332], [33.0, 20658.0], [35.0, 21250.0], [36.0, 20653.0], [39.0, 21190.0], [40.0, 21041.0], [42.0, 20660.0], [45.0, 21183.0], [44.0, 20767.2], [48.0, 20840.0], [55.0, 20659.0], [54.0, 20666.0], [56.0, 20663.166666666668], [59.0, 20654.0], [58.0, 20663.0], [61.0, 20657.0], [62.0, 20666.0], [66.0, 20661.0], [65.0, 20666.0], [64.0, 20660.0], [70.0, 20649.0], [69.0, 20661.0], [68.0, 20653.0], [74.0, 20645.5], [73.0, 20649.0], [79.0, 20663.0], [77.0, 20661.333333333332], [80.0, 20658.0], [87.0, 20645.0], [91.0, 20638.0], [90.0, 20642.8], [89.0, 20635.5], [94.0, 20650.5], [92.0, 20646.0], [99.0, 20560.0], [98.0, 20639.25], [103.0, 20560.0], [102.0, 20562.5], [100.0, 20557.0], [107.0, 20561.5], [105.0, 20567.5], [110.0, 20556.0], [115.0, 6990.0], [114.0, 20531.0], [112.0, 20560.75], [117.0, 6455.0], [116.0, 6989.0], [123.0, 5876.0], [121.0, 5733.0], [120.0, 6104.0], [127.0, 5863.0], [126.0, 5855.5], [124.0, 5876.0], [134.0, 5892.0], [131.0, 5730.0], [130.0, 5825.0], [128.0, 5728.0], [142.0, 5698.0], [141.0, 5767.5], [139.0, 5929.333333333333], [137.0, 5823.0], [136.0, 5822.0], [151.0, 5766.0], [150.0, 5685.0], [149.0, 5779.0], [148.0, 5678.0], [147.0, 5794.0], [146.0, 5713.0], [145.0, 5768.666666666667], [159.0, 5619.0], [158.0, 5758.0], [157.0, 5632.0], [156.0, 5660.0], [155.0, 6171.0], [154.0, 5668.0], [153.0, 5758.0], [152.0, 5763.0], [167.0, 5581.0], [166.0, 5722.0], [164.0, 5627.0], [163.0, 5716.0], [162.0, 5848.0], [174.0, 5680.5], [172.0, 6084.0], [171.0, 5696.0], [170.0, 5668.0], [169.0, 5691.0], [168.0, 5684.0], [183.0, 5528.0], [182.0, 5603.0], [181.0, 5692.0], [180.0, 5698.0], [179.0, 5612.0], [178.0, 5650.0], [177.0, 5725.0], [176.0, 5645.0], [191.0, 5447.0], [190.0, 5456.0], [188.0, 5561.0], [187.0, 5457.0], [186.0, 5658.0], [185.0, 5670.0], [184.0, 5594.0], [199.0, 5530.5], [197.0, 5429.0], [196.0, 5543.5], [194.0, 5425.0], [193.0, 5641.0], [192.0, 5423.0], [207.0, 5391.0], [206.0, 5402.0], [205.0, 5604.0], [203.0, 5611.0], [202.0, 5546.0], [201.0, 5533.5], [215.0, 5446.0], [214.0, 5457.0], [213.0, 5361.0], [212.0, 5456.0], [211.0, 5335.0], [210.0, 5362.0], [208.0, 5358.0], [223.0, 5433.0], [221.0, 5465.5], [219.0, 5365.5], [217.0, 5437.0], [216.0, 5454.0], [231.0, 5389.0], [230.0, 5348.5], [228.0, 5347.0], [227.0, 5349.0], [226.0, 5457.0], [225.0, 5562.5], [239.0, 5228.0], [238.0, 5435.0], [237.0, 5344.0], [236.0, 5246.0], [235.0, 5409.0], [234.0, 5268.0], [233.0, 5483.0], [232.0, 5390.0], [247.0, 5146.0], [246.0, 5311.0], [245.0, 5407.0], [244.0, 5720.0], [243.0, 5222.0], [242.0, 5315.0], [241.0, 5767.0], [240.0, 5445.0], [255.0, 5327.0], [254.0, 5654.0], [253.0, 5698.0], [252.0, 5133.0], [251.0, 5294.0], [250.0, 5348.0], [249.0, 5353.5], [271.0, 5114.0], [269.0, 5165.0], [268.0, 5092.0], [267.0, 5461.0], [264.0, 5106.0], [262.0, 5140.5], [260.0, 5621.0], [259.0, 5249.75], [286.0, 4891.0], [287.0, 5430.0], [285.0, 4948.0], [284.0, 4940.0], [283.0, 4998.0], [281.0, 5470.0], [280.0, 4989.0], [279.0, 5490.0], [273.0, 5297.0], [275.0, 5038.0], [274.0, 5574.0], [278.0, 5021.0], [277.0, 4988.0], [276.0, 5029.0], [301.0, 5299.0], [302.0, 4766.0], [300.0, 4911.0], [290.0, 4960.0], [289.0, 5162.5], [299.0, 4910.0], [298.0, 5020.0], [297.0, 4948.0], [296.0, 4975.0], [295.0, 4819.0], [294.0, 5398.0], [293.0, 4880.0], [292.0, 4922.5], [307.0, 5250.0], [317.0, 4624.0], [318.0, 5211.0], [316.0, 4835.666666666667], [313.0, 4904.0], [312.0, 4893.5], [310.0, 4919.0], [309.0, 5093.0], [305.0, 4864.0], [304.0, 4903.5], [335.0, 4631.333333333333], [332.0, 4639.0], [322.0, 4655.0], [320.0, 4705.0], [331.0, 4733.0], [330.0, 4643.0], [329.0, 4593.0], [328.0, 4670.5], [327.0, 4703.0], [325.0, 4626.0], [324.0, 4650.0], [350.0, 4535.5], [351.0, 4486.0], [348.0, 4603.0], [347.0, 4342.0], [346.0, 4637.0], [345.0, 4544.0], [343.0, 4614.666666666667], [340.0, 4588.0], [339.0, 4602.0], [337.0, 4653.5], [366.0, 4431.0], [367.0, 4336.0], [365.0, 4341.0], [364.0, 4360.0], [363.0, 4355.0], [362.0, 4469.0], [361.0, 4426.0], [359.0, 4473.0], [352.0, 4523.0], [355.0, 4356.0], [354.0, 4470.0], [358.0, 4474.0], [357.0, 4497.0], [356.0, 4397.0], [382.0, 4294.0], [383.0, 4168.0], [381.0, 4193.0], [380.0, 4336.0], [379.0, 4327.0], [378.0, 4342.0], [377.0, 4232.0], [376.0, 4348.0], [375.0, 4309.0], [369.0, 4422.0], [368.0, 4354.0], [371.0, 4398.0], [370.0, 4343.0], [374.0, 4392.0], [373.0, 4335.0], [372.0, 4327.0], [399.0, 4240.5], [397.0, 4180.0], [386.0, 4286.0], [385.0, 4297.5], [395.0, 4159.0], [394.0, 4165.0], [393.0, 4211.5], [391.0, 4288.0], [390.0, 4277.0], [389.0, 4246.0], [388.0, 4271.5], [414.0, 4001.0], [415.0, 4126.0], [413.0, 4472.0], [412.0, 4155.0], [411.0, 4151.0], [410.0, 4325.0], [408.0, 4172.0], [407.0, 4159.0], [401.0, 4201.0], [400.0, 4160.0], [403.0, 4061.0], [402.0, 4213.0], [406.0, 4151.0], [405.0, 4053.0], [404.0, 4198.0], [429.0, 3922.0], [431.0, 3906.5], [428.0, 3998.0], [419.0, 3956.0], [418.0, 4092.0], [417.0, 3965.0], [416.0, 3982.0], [427.0, 3902.0], [426.0, 3935.0], [424.0, 3975.0], [423.0, 3942.0], [422.0, 3983.0], [421.0, 3964.0], [420.0, 4111.0], [446.0, 3945.0], [447.0, 3869.0], [445.0, 3834.0], [444.0, 3881.0], [443.0, 3851.0], [442.0, 3848.0], [441.0, 3894.0], [440.0, 3853.0], [439.0, 3870.0], [433.0, 3922.0], [432.0, 3949.0], [435.0, 3898.0], [434.0, 3875.0], [438.0, 3920.0], [437.0, 3902.0], [462.0, 3753.0], [463.0, 3976.0], [461.0, 3766.0], [460.0, 3772.0], [459.0, 4170.0], [458.0, 3770.0], [457.0, 3778.0], [456.0, 3794.0], [454.0, 3799.0], [448.0, 3817.0], [451.0, 3820.0], [450.0, 3845.0], [453.0, 3816.0], [452.0, 3821.0], [477.0, 3972.0], [478.0, 3502.0], [476.0, 3959.0], [467.0, 3965.0], [466.0, 3758.0], [464.0, 4024.0], [475.0, 3962.0], [474.0, 4028.0], [472.0, 4095.0], [471.0, 3982.0], [470.0, 3969.0], [469.0, 4103.0], [468.0, 4027.0], [493.0, 3816.0], [494.0, 3812.0], [492.0, 3908.0], [483.0, 3872.0], [482.0, 3814.0], [480.0, 3969.5], [491.0, 3856.0], [490.0, 3829.0], [489.0, 3847.0], [488.0, 3851.0], [487.0, 3921.5], [485.0, 3881.0], [484.0, 3926.0], [510.0, 3812.0], [511.0, 3849.0], [509.0, 3825.0], [508.0, 3808.0], [507.0, 3863.0], [506.0, 3327.0], [505.0, 3851.0], [504.0, 3852.0], [503.0, 3859.0], [496.0, 3927.0], [499.0, 3858.5], [497.0, 3858.0], [502.0, 3415.0], [501.0, 3851.0], [500.0, 3790.0], [538.0, 3647.0], [530.0, 3482.5], [542.0, 3226.6666666666665], [543.0, 3622.0], [528.0, 3713.0], [539.0, 3645.0], [537.0, 3223.3333333333335], [519.0, 3772.0], [518.0, 3350.0], [517.0, 3826.0], [516.0, 3803.0], [514.0, 3796.0], [512.0, 3310.0], [527.0, 3278.0], [526.0, 3460.0], [524.0, 3708.0], [523.0, 3725.0], [522.0, 3788.0], [521.0, 3759.0], [520.0, 3377.0], [534.0, 3344.0], [533.0, 3238.5], [531.0, 3302.0], [569.0, 2901.0], [574.0, 2921.0], [575.0, 2913.0], [563.0, 3498.0], [562.0, 3154.0], [565.0, 2976.0], [564.0, 2951.0], [573.0, 3007.0], [572.0, 3213.5], [570.0, 2947.0], [568.0, 3037.0], [550.0, 3032.0], [549.0, 3203.0], [548.0, 3182.0], [547.0, 3405.5], [545.0, 3200.0], [544.0, 3226.0], [559.0, 3285.5], [557.0, 3197.0], [556.0, 3537.0], [555.0, 3212.0], [554.0, 3001.0], [553.0, 3615.0], [552.0, 3186.0], [567.0, 2925.0], [566.0, 2934.0], [601.0, 2627.0], [606.0, 2772.0], [607.0, 2762.0], [592.0, 3283.0], [594.0, 3300.0], [593.0, 3243.0], [597.0, 3030.5], [595.0, 2869.0], [605.0, 2773.0], [604.0, 2700.0], [602.0, 2614.0], [600.0, 2795.0], [583.0, 2869.0], [582.0, 3426.0], [581.0, 2878.0], [580.0, 3027.0], [579.0, 2876.0], [578.0, 2889.0], [576.0, 2892.0], [591.0, 2765.0], [590.0, 3284.0], [589.0, 3298.0], [588.0, 2832.0], [587.0, 2884.0], [586.0, 2901.0], [585.0, 2815.0], [584.0, 2856.0], [599.0, 2695.0], [598.0, 2813.0], [637.0, 2617.0], [628.0, 2623.0], [638.0, 2563.0], [625.0, 2645.0], [624.0, 2622.0], [627.0, 2635.0], [626.0, 3026.0], [636.0, 2540.5], [634.0, 2529.5], [632.0, 2611.0], [614.0, 2847.0], [613.0, 2637.5], [611.0, 3159.0], [610.0, 2727.0], [609.0, 2743.0], [623.0, 3056.5], [621.0, 2503.0], [620.0, 3067.0], [619.0, 3072.0], [618.0, 3080.0], [617.0, 2852.3333333333335], [631.0, 2620.0], [630.0, 2602.0], [629.0, 2458.0], [666.0, 2402.5], [658.0, 2848.0], [669.0, 2435.0], [671.0, 2383.0], [657.0, 2694.0], [668.0, 2411.5], [664.0, 2422.0], [647.0, 2603.0], [646.0, 2982.0], [645.0, 2576.0], [644.0, 2442.0], [643.0, 2558.0], [642.0, 2664.0], [641.0, 2577.3333333333335], [654.0, 2677.5], [652.0, 2384.0], [651.0, 2852.0], [649.0, 2402.0], [648.0, 2408.0], [662.0, 2423.0], [661.0, 2660.5], [659.0, 2431.0], [698.0, 2418.5], [691.0, 2614.0], [701.0, 2542.0], [703.0, 2537.0], [690.0, 2262.6666666666665], [699.0, 2543.0], [696.0, 2528.0], [679.0, 2531.0], [678.0, 2355.0], [676.0, 2365.5], [674.0, 2365.5], [672.0, 2402.0], [687.0, 2346.0], [686.0, 2620.0], [685.0, 2325.5], [683.0, 2325.0], [682.0, 2680.5], [680.0, 2700.0], [695.0, 2423.0], [693.0, 2290.0], [692.0, 2702.0], [731.0, 2293.0], [724.0, 2490.0], [733.0, 2239.0], [720.0, 2497.0], [723.0, 2487.0], [722.0, 2038.5], [730.0, 1960.0], [729.0, 1965.0], [728.0, 2450.0], [711.0, 2438.0], [710.0, 2538.3333333333335], [707.0, 2625.0], [705.0, 2595.3333333333335], [719.0, 2428.0], [718.0, 2032.0], [717.0, 2035.0], [716.0, 2047.0], [715.0, 2236.0], [713.0, 2533.0], [712.0, 2534.0], [727.0, 1984.0], [726.0, 2160.0], [725.0, 2080.0], [760.0, 1697.0], [764.0, 2190.0], [767.0, 1656.0], [754.0, 2175.0], [753.0, 1980.0], [756.0, 2166.0], [755.0, 1741.0], [766.0, 1655.0], [765.0, 1684.0], [763.0, 1696.0], [762.0, 1680.0], [761.0, 1705.0], [751.0, 1778.0], [737.0, 1984.0], [736.0, 2226.3333333333335], [739.0, 2288.0], [738.0, 2405.0], [741.0, 2249.0], [740.0, 2021.0], [743.0, 2266.0], [742.0, 2233.0], [750.0, 2234.0], [749.0, 1765.0], [748.0, 2210.0], [747.0, 2225.0], [746.0, 2254.0], [745.0, 2339.0], [744.0, 2215.0], [759.0, 2195.0], [757.0, 2271.0], [796.0, 1620.0], [799.0, 1977.0], [785.0, 1561.0], [784.0, 1555.0], [787.0, 1508.0], [786.0, 1683.0], [789.0, 1631.0], [788.0, 1538.0], [798.0, 1624.0], [797.0, 1735.0], [795.0, 1509.0], [794.0, 1510.0], [793.0, 1527.0], [792.0, 2023.0], [783.0, 1685.0], [768.0, 1711.0], [770.0, 2142.0], [769.0, 1699.0], [773.0, 1910.5], [771.0, 1703.0], [775.0, 2123.0], [774.0, 1633.0], [782.0, 1640.0], [781.0, 1545.0], [780.0, 1878.0], [778.0, 1538.0], [777.0, 2139.0], [776.0, 1563.0], [791.0, 1661.0], [790.0, 1490.0], [824.0, 1487.0], [830.0, 1464.0], [831.0, 1335.0], [817.0, 1529.5], [819.0, 1404.0], [818.0, 1490.0], [829.0, 1648.0], [827.0, 1468.0], [826.0, 1652.5], [815.0, 1391.0], [800.0, 1608.0], [802.0, 1980.0], [801.0, 1429.0], [804.0, 1954.0], [803.0, 1412.0], [807.0, 1961.0], [806.0, 1501.5], [814.0, 1406.0], [813.0, 1409.0], [810.0, 1421.0], [809.0, 1397.0], [808.0, 1952.0], [823.0, 1487.0], [822.0, 1361.0], [821.0, 1501.0], [820.0, 1392.0], [857.0, 1464.5], [862.0, 1608.0], [863.0, 1308.0], [850.0, 1336.5], [848.0, 1337.5], [861.0, 1617.0], [860.0, 1316.0], [858.0, 1313.0], [846.0, 1317.0], [832.0, 1755.0], [834.0, 1316.0], [833.0, 1373.0], [836.0, 1392.0], [835.0, 1536.0], [838.0, 1530.0], [837.0, 1738.0], [845.0, 1315.0], [844.0, 1339.0], [843.0, 1824.0], [842.0, 1706.0], [841.0, 1351.0], [840.0, 1623.0], [855.0, 1327.5], [853.0, 1459.0], [852.0, 1355.0], [851.0, 1332.0], [888.0, 1469.0], [892.0, 1409.0], [895.0, 1410.0], [883.0, 1568.0], [881.0, 1514.5], [885.0, 1603.0], [884.0, 1493.0], [894.0, 1409.0], [893.0, 1436.0], [891.0, 1578.0], [890.0, 1452.0], [889.0, 1454.0], [879.0, 1498.0], [865.0, 1328.0], [864.0, 1307.0], [868.0, 1642.5], [866.0, 1392.0], [871.0, 1560.0], [869.0, 1581.0], [878.0, 1539.0], [877.0, 1552.0], [876.0, 1499.0], [875.0, 1577.0], [874.0, 1537.0], [873.0, 1550.0], [887.0, 1463.0], [886.0, 1477.0], [920.0, 1262.0], [926.0, 1235.0], [927.0, 1250.0], [912.0, 1339.0], [914.0, 1336.0], [913.0, 1308.0], [925.0, 1260.3333333333333], [922.0, 1417.0], [921.0, 1281.0], [911.0, 1329.5], [897.0, 1403.5], [899.0, 1368.0], [898.0, 1430.0], [903.0, 1316.6666666666667], [900.0, 1524.0], [909.0, 1332.0], [908.0, 1358.0], [907.0, 1343.0], [906.0, 1373.0], [905.0, 1372.0], [904.0, 1395.0], [919.0, 1116.0], [918.0, 1280.0], [917.0, 1228.0], [915.0, 1317.0], [958.0, 1191.0], [959.0, 1174.5], [953.0, 1148.3333333333333], [956.0, 1152.0], [951.0, 1167.0], [947.0, 1172.0], [945.0, 1084.0], [941.0, 1178.0], [929.0, 1257.0], [928.0, 1270.0], [931.0, 1227.0], [930.0, 1255.0], [933.0, 1222.0], [932.0, 1215.0], [935.0, 1157.0], [934.0, 1199.0], [939.0, 1189.0], [938.0, 1315.0], [977.0, 1168.0], [991.0, 817.2], [986.0, 961.0], [985.0, 1000.0], [984.0, 1007.5], [982.0, 1175.8333333333333], [981.0, 1074.5], [980.0, 1138.0], [976.0, 1149.5], [974.0, 1172.5], [962.0, 1184.0], [967.0, 1158.0], [964.0, 999.0], [971.0, 1074.1666666666667], [968.0, 1101.3333333333333], [1000.0, 757.0], [999.0, 724.0], [998.0, 897.0], [997.0, 763.0], [996.0, 905.0], [995.0, 858.25], [1.0, 21201.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[501.21900000000016, 5297.224]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2033.3333333333333, "minX": 1.66506294E12, "maxY": 115219.63333333333, "series": [{"data": [[1.66506294E12, 115219.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.66506294E12, 2033.3333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66506294E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5297.224, "minX": 1.66506294E12, "maxY": 5297.224, "series": [{"data": [[1.66506294E12, 5297.224]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66506294E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5295.645, "minX": 1.66506294E12, "maxY": 5295.645, "series": [{"data": [[1.66506294E12, 5295.645]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66506294E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 380.97200000000004, "minX": 1.66506294E12, "maxY": 380.97200000000004, "series": [{"data": [[1.66506294E12, 380.97200000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66506294E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 724.0, "minX": 1.66506294E12, "maxY": 6990.0, "series": [{"data": [[1.66506294E12, 6990.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.66506294E12, 5550.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.66506294E12, 6150.12]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.66506294E12, 5715.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.66506294E12, 724.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.66506294E12, 3210.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66506294E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1159.5, "minX": 1.0, "maxY": 20659.0, "series": [{"data": [[1.0, 6455.0], [2.0, 6989.5], [151.0, 2614.0], [161.0, 3817.0], [169.0, 5555.0], [92.0, 1159.5], [185.0, 1555.0], [125.0, 4523.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[114.0, 20659.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 185.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1159.5, "minX": 1.0, "maxY": 20658.5, "series": [{"data": [[1.0, 5023.0], [2.0, 6989.5], [151.0, 2614.0], [161.0, 3817.0], [169.0, 5555.0], [92.0, 1159.5], [185.0, 1555.0], [125.0, 4523.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[114.0, 20658.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 185.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.66506294E12, "maxY": 16.666666666666668, "series": [{"data": [[1.66506294E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66506294E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.66506294E12, "maxY": 14.766666666666667, "series": [{"data": [[1.66506294E12, 14.766666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.66506294E12, 1.9]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.66506294E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.66506294E12, "maxY": 14.766666666666667, "series": [{"data": [[1.66506294E12, 14.766666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.66506294E12, 1.9]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66506294E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.66506294E12, "maxY": 14.766666666666667, "series": [{"data": [[1.66506294E12, 14.766666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.66506294E12, 1.9]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.66506294E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

